name: Parse & Post Articles
concurrency:
  group: post-articles
  cancel-in-progress: false
  
permissions:
  contents: write
on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '30 22 * * *'  # 5:30 UTC+7
    - cron: '0 23 * * *'   # 6:00
    - cron: '30 23 * * *'  # 6:30
    - cron: '0 0 * * *'    # 7:00
    - cron: '30 0 * * *'   # 7:30
    - cron: '0 1 * * *'    # 8:00
    - cron: '30 1 * * *'   # 8:30
    - cron: '0 2 * * *'    # 9:00
    - cron: '30 2 * * *'   # 9:30
    - cron: '0 3 * * *'    # 10:00
    - cron: '30 3 * * *'   # 10:30
    - cron: '0 4 * * *'    # 11:00
    - cron: '30 4 * * *'   # 11:30
    - cron: '0 5 * * *'    # 12:00
    - cron: '30 5 * * *'   # 12:30
    - cron: '0 6 * * *'    # 13:00
    - cron: '30 6 * * *'   # 13:30
    - cron: '0 7 * * *'    # 14:00
    - cron: '30 7 * * *'   # 14:30
    - cron: '0 8 * * *'    # 15:00
    - cron: '30 8 * * *'   # 15:30
    - cron: '0 9 * * *'    # 16:00
    - cron: '30 9 * * *'   # 16:30
    - cron: '0 10 * * *'   # 17:00
    - cron: '30 10 * * *'  # 17:30
    - cron: '0 11 * * *'   # 18:00
    - cron: '30 11 * * *'  # 18:30
    
env:
  POST_DELAY: 10
  BATCH_LIMIT: 30

jobs:

  parse:
    name: –ü–∞—Ä—Å–∏–Ω–≥ ‚Üí –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (WireGuard)
    runs-on: ubuntu-latest
    # –î–û–ë–ê–í–õ–ï–ù–û: –°–µ–∫—Ü–∏—è outputs –¥–ª—è –¥–∂–æ–±–∞ parse
    outputs:
      new_articles_found: ${{ steps.parse_step.outputs.new_articles_found }} # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã—Ö–æ–¥ —à–∞–≥–∞ –∫–∞–∫ –≤—ã—Ö–æ–¥ –¥–∂–æ–±–∞
    env:
      WG_CONFIG: ${{ secrets.WG_CONFIG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-parser.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install parser requirements
        run: |
          if [ -f requirements-parser.txt ]; then
            pip install -r requirements-parser.txt
          fi

#      - name: üîê Setup WireGuard & install jq
#        run: |
#          sudo apt-get update \
#            && sudo apt-get install -y wireguard-tools resolvconf curl jq
#          mkdir -p $HOME/wg
#          # –ü–∏—à–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ base64‚Äêdecode
#          echo "$WG_CONFIG" > $HOME/wg/wg0.conf
#          chmod 600 $HOME/wg/wg0.conf
#          sudo wg-quick up $HOME/wg/wg0.conf
#          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
  
      # ====================================================================
      # –ù–û–í–´–ô/–ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ë–õ–û–ö: Run parser
      # ====================================================================
      - name: Run parser
        id: parse_step # <-- ID –¥–ª—è —à–∞–≥–∞, —á—Ç–æ–±—ã –∫ –Ω–µ–º—É –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è
        run: |
          echo "‚Üí STARTING PARSER RUN" # –ú–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
          # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä, –µ–≥–æ –ª–æ–≥–∏ –∏–¥—É—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ —Ñ–∞–π–ª
          python3 -u main.py \
            --lang ${{ inputs.lang || 'ru' }} \
            --limit ${{ env.BATCH_LIMIT_PARSE || 30 }} \
            --posted-state-file articles/posted.json | tee parser_output.txt

          echo "‚Üí PARSER RUN COMPLETE" # –ú–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ —Ñ–∞–π–ª–∞ –≤—ã–≤–æ–¥–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –≤—ã—Ö–æ–¥ —à–∞–≥–∞
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º `tr -d '[:space:]'` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É)
          NEW_ARTICLES_STATUS=$(grep "NEW_ARTICLES_STATUS:" parser_output.txt | cut -d: -f2 | tr -d '[:space:]') # <-- –î–û–ë–ê–í–õ–ï–ù–û: tr -d '[:space:]'
          echo "new_articles_found=$NEW_ARTICLES_STATUS" >> $GITHUB_OUTPUT # <-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–∞ —à–∞–≥–∞
          echo "Extracted new_articles_found status: '$NEW_ARTICLES_STATUS'" # <-- –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–¥–æ–±–∞–≤–∏–ª –∫–∞–≤—ã—á–∫–∏)
      # ====================================================================

#      - name: üõë Teardown WireGuard
#        if: always()
#        run: sudo wg-quick down $HOME/wg/wg0.conf || true

      - name: Debug all files
        run: ls -R

      - name: Debug parser output
        run: |
          echo "‚Üí Tree of generated articles/:"
          ls -R articles

      - name: Upload parsed-content
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles/*

  post:
    name: Publish new articles
    needs: parse
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: Checkout repo (contains empty catalog.json)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python for poster
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-poster.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install poster requirements
        run: |
          pip install -r requirements-poster.txt

      - name: Download parsed-content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: parsed_articles

      - name: Debug parsed_articles
        run: |
          echo "‚Üí Tree of parsed_articles/:"
          ls -R parsed_articles

      # ====================================================================
      # –ù–û–í–´–ô/–ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ë–õ–û–ö: Run poster
      # ====================================================================
      - name: Debug extracted status
        run: |
          # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å —Å—Å—ã–ª–∞–µ–º—Å—è –Ω–∞ needs.parse.outputs.new_articles_found
          echo "Value of new_articles_found from parse_step: '${{ needs.parse.outputs.new_articles_found }}'"
          echo "Comparison result: ${{ needs.parse.outputs.new_articles_found == 'true' }}"
      - name: Run poster
        # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å —Å—Å—ã–ª–∞–µ–º—Å—è –Ω–∞ needs.parse.outputs.new_articles_found
        if: needs.parse.outputs.new_articles_found == 'true' 
        run: |
          echo "‚Üí Running poster against parsed_articles"
          python3 poster.py \
            --parsed-dir parsed_articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT
      # ====================================================================

      - name: Debug articles after poster
        run: |
          echo "‚Üí Tree of articles/ after poster run:"
          ls -R articles

      - name: Commit updated posted.json
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add articles/posted.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update posted catalog after posting"
            git push
          else
            echo "‚úÖ posted.json unchanged"
          fi
