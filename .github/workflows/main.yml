name: Run Python Parser

on:
  schedule:
    # Запускать каждый день в 00:00 UTC (или 7:00 AM по вашему часовому поясу, если вы в +7)
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Позволяет запускать вручную из интерфейса GitHub Actions

jobs:
  parse_articles:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Используйте 3.9, так как undetected_chromedriver хорошо работает с ним

    - name: Install system dependencies for Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable # Убедимся, что Chrome установлен
        google-chrome --version # Проверяем версию установленного Chrome. ЭТО ВАЖНО ДЛЯ ДАЛЬНЕЙШИХ ОБНОВЛЕНИЙ version_main/ChromeDriver
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Download specific ChromeDriver
      run: |
        # ВАЖНО: ЭТА ВЕРСИЯ CHROME И CHROME DRIVER ДОЛЖНА СОВПАДАТЬ!
        # ТЕКУЩАЯ ВЕРСИЯ CHROME В GITHUB ACTIONS - 138.0.7204.100 (из ваших логов)
        # Если Chrome в GitHub Actions обновится, вам нужно будет обновить CHROME_DRIVER_VERSION здесь
        CHROME_DRIVER_VERSION="138.0.7204.100" 
        CHROME_DRIVER_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        
        echo "Downloading ChromeDriver from: $CHROME_DRIVER_URL"
        wget -N $CHROME_DRIVER_URL -P /tmp
        unzip -o /tmp/chromedriver-linux64.zip -d /tmp/chromedriver_dir # Использовал другое имя, чтобы избежать конфликтов
        
        # Перемещаем исполняемый файл в стандартный путь и даем права
        sudo mv /tmp/chromedriver_dir/chromedriver-linux64 /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        
        echo "ChromeDriver version installed:"
        chromedriver --version
      
    - name: Run parser
      env:
        WG_CONFIG: ${{ secrets.WG_CONFIG }} # Если используете WireGuard (передайте через секреты)
      run: |
        python main.py --rss-url https://e.vnexpress.net/rss/news.rss --limit 5

    - name: Get new_articles_found status
      id: get_status
      run: |
        # Извлекаем последнюю строку из логов и ищем статус
        STATUS_LINE=$(tail -n 1 parse_articles.log | grep "NEW_ARTICLES_STATUS")
        STATUS=${STATUS_LINE#*:} # Извлекаем значение после двоеточия
        echo "new_articles_found=$STATUS" >> $GITHUB_OUTPUT
      shell: bash {0}

    # Этот шаг опционален и нужен, если вы хотите использовать статус в других местах workflow
    - name: Use new_articles_found status
      run: echo "New articles found status: ${{ steps.get_status.outputs.new_articles_found }}"
