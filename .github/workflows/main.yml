name: Parse & Post Articles
concurrency:
  group: post-articles
  cancel-in-progress: false
  
permissions:
  contents: write
on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '30 22 * * *'  # 5:30 UTC+7
    - cron: '0 23 * * *'   # 6:00
    - cron: '30 23 * * *'  # 6:30
    - cron: '0 0 * * *'    # 7:00
    - cron: '30 0 * * *'   # 7:30
    - cron: '0 1 * * *'    # 8:00
    - cron: '30 1 * * *'   # 8:30
    - cron: '0 2 * * *'    # 9:00
    - cron: '30 2 * * *'   # 9:30
    - cron: '0 3 * * *'    # 10:00
    - cron: '30 3 * * *'   # 10:30
    - cron: '0 4 * * *'    # 11:00
    - cron: '30 4 * * *'   # 11:30
    - cron: '0 5 * * *'    # 12:00
    - cron: '30 5 * * *'   # 12:30
    - cron: '0 6 * * *'    # 13:00
    - cron: '30 6 * * *'   # 13:30
    - cron: '0 7 * * *'    # 14:00
    - cron: '30 7 * * *'   # 14:30
    - cron: '0 8 * * *'    # 15:00
    - cron: '30 8 * * *'   # 15:30
    - cron: '0 9 * * *'    # 16:00
    - cron: '30 9 * * *'   # 16:30
    - cron: '0 10 * * *'   # 17:00
    - cron: '30 10 * * *'  # 17:30
    - cron: '0 11 * * *'   # 18:00
    - cron: '30 11 * * *'  # 18:30
    
env:
  POST_DELAY: 10
  BATCH_LIMIT: 30

jobs:

  parse:
    name: Парсинг → артефакты
    runs-on: ubuntu-latest
    outputs:
      new_articles_found: ${{ steps.parse_step.outputs.new_articles_found }}
    env:
      WG_CONFIG: ${{ secrets.WG_CONFIG }} # Если WireGuard используется

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5 # Обновлено до v5
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-parser.txt') }}
          restore-keys: |
             ${{ runner.os }}-pip-

      - name: Install parser requirements
        run: |
          if [ -f requirements-parser.txt ]; then
            pip install -r requirements-parser.txt
          fi

      # --- ДОБАВЛЕНО: Установка Google Chrome и ChromeDriver ---
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install google-chrome-stable -y

      - name: Install JQ for ChromeDriver script
        run: |
          sudo apt-get install jq -y

      - name: Install ChromeDriver
        id: install_chromedriver # Добавляем ID для шага
        run: |
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+' | head -n 1)
          echo "Detected Chrome version: $CHROME_VERSION"
          
          # Получаем URL для скачивания ChromeDriver, соответствующий версии Chrome
          DRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" | \
                       jq -r --arg ver "$CHROME_VERSION" '.channels.Stable.downloads.chromedriver[] | select(.platform == "linux64") | .url')
          
          if [ -z "$DRIVER_URL" ]; then
            echo "Error: Could not find ChromeDriver download URL for Chrome version $CHROME_VERSION"
            exit 1
          fi
          
          echo "Downloading ChromeDriver from: $DRIVER_URL"
          wget -q --show-progress -O chromedriver.zip "$DRIVER_URL"
          
          unzip chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          echo "ChromeDriver installed to /usr/local/bin/chromedriver"
      # --- КОНЕЦ ДОБАВЛЕННОГО БЛОКА ---

      - name: Run parser
        id: parse_step
        run: |
          echo "→ STARTING PARSER RUN" # Маркер начала работы парсера
          # Запускаем парсер, его логи идут напрямую в консоль и в файл
          # Убедитесь, что CHROME_DRIVER_PATH в main.py установлен в None
          python3 -u main.py --rss-url https://e.vnexpress.net/rss/news.rss -l ru -n 5 \
            --lang ${{ inputs.lang || 'ru' }} \
            --limit ${{ env.BATCH_LIMIT_PARSE || 30 }} \
            --posted-state-file articles/posted.json | tee parser_output.txt

          echo "→ PARSER RUN COMPLETE" # Маркер завершения работы парсера
          
          NEW_ARTICLES_STATUS=$(grep "NEW_ARTICLES_STATUS:" parser_output.txt | cut -d: -f2 | tr -d '[:space:]')
          echo "new_articles_found=$NEW_ARTICLES_STATUS" >> $GITHUB_OUTPUT
          echo "Extracted new_articles_found status: '$NEW_ARTICLES_STATUS'"

      - name: Debug all files
        run: ls -R

      - name: Debug parser output
        run: |
          echo "→ Tree of generated articles/:"
          ls -R articles || echo "articles directory not found or empty." # Добавлено для лучшей отладки

      - name: Upload parsed-content
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles/*

  post:
    name: Publish new articles
    needs: parse
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: Checkout repo (contains empty catalog.json)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python for poster
        uses: actions/setup-python@v5 # Обновлено до v5
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-poster.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install poster requirements
        run: |
          pip install -r requirements-poster.txt

      - name: Download parsed-content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: parsed_articles

      - name: Debug parsed_articles
        run: |
          echo "→ Tree of parsed_articles/:"
          ls -R parsed_articles || echo "parsed_articles directory not found or empty." # Добавлено для лучшей отладки

      - name: Debug extracted status
        run: |
          echo "Value of new_articles_found from parse_step: '${{ needs.parse.outputs.new_articles_found }}'"
          echo "Comparison result: ${{ needs.parse.outputs.new_articles_found == 'true' }}"
      - name: Run poster
        if: needs.parse.outputs.new_articles_found == 'true' 
        run: |
          echo "→ Running poster against parsed_articles"
          python3 poster.py \
            --parsed-dir parsed_articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT

      - name: Debug articles after poster
        run: |
          echo "→ Tree of articles/ after poster run:"
          ls -R articles || echo "articles directory not found or empty."

      - name: Commit updated posted.json
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add articles/posted.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update posted catalog after posting"
            git push
          else
            echo "✅ posted.json unchanged"
          fi
