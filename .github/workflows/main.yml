name: Run Python Parser

on:
  schedule:
    # Запускать каждый день в 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Позволяет запускать вручную из интерфейса GitHub Actions

jobs:
  parse_articles:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Используем Python 3.9, так как он хорошо работает с undetected_chromedriver

    - name: Install system dependencies for Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable # Убедимся, что Google Chrome установлен
        google-chrome --version # Выводим версию Chrome. Полезно для отладки, если версия изменится.
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Download specific ChromeDriver
      run: |
        # ВАЖНО: Эта версия ChromeDriver ДОЛЖНА СОВПАДАТЬ с версией Chrome, установленной выше (138.0.7204.100).
        # Если GitHub Actions обновит Chrome в будущем, вам придется обновить CHROME_DRIVER_VERSION здесь.
        CHROME_DRIVER_VERSION="138.0.7204.100" 
        CHROME_DRIVER_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        
        echo "Downloading ChromeDriver from: $CHROME_DRIVER_URL"
        wget -N $CHROME_DRIVER_URL -P /tmp # Скачиваем архив в /tmp
        unzip -o /tmp/chromedriver-linux64.zip -d /tmp/chromedriver_dir # Распаковываем в отдельную директорию
        
        # Перемещаем исполняемый файл ChromeDriver в /usr/local/bin, чтобы он был в PATH и доступен
        sudo mv /tmp/chromedriver_dir/chromedriver-linux64 /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver # Делаем файл исполняемым
        
        echo "ChromeDriver version installed:"
        chromedriver --version # Проверяем установленную версию ChromeDriver
      
    - name: Run parser
      # Если вы используете WireGuard, раскомментируйте следующую строку и убедитесь, что WG_CONFIG настроен в Secrets.
      # env:
      #   WG_CONFIG: ${{ secrets.WG_CONFIG }} 
      run: |
        python main.py --rss-url https://e.vnexpress.net/rss/news.rss --limit 5

    - name: Get new_articles_found status
      id: get_status
      run: |
        # Эта часть собирает логи для проверки, были ли найдены новые статьи.
        STATUS_LINE=$(tail -n 1 parse_articles.log | grep "NEW_ARTICLES_STATUS")
        STATUS=${STATUS_LINE#*:} # Извлекаем значение после двоеточия (true/false)
        echo "new_articles_found=$STATUS" >> $GITHUB_OUTPUT
      shell: bash {0}

    # Этот шаг опционален и нужен, если вы хотите использовать статус в других местах workflow
    - name: Use new_articles_found status
      run: echo "New articles found status: ${{ steps.get_status.outputs.new_articles_found }}"
